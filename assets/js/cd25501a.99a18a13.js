"use strict";(self.webpackChunkkarunjosyin=self.webpackChunkkarunjosyin||[]).push([[8176],{8119:(e,n,t)=>{t.r(n),t.d(n,{Highlight:()=>d,assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>a});var s=t(4848),o=t(8453);const r={},i=void 0,l={id:"CephBox/CephBox - DIY setup/Setup Ente Photos app",title:"Setup Ente Photos app",description:"Ente Photos  app is a fully open source, end-to-end encrypted platform  to store your photos(an open source alternative to Apple and Google Photos).Ente photos can be also used to Self-host and integrate with any S3 compatible storage platform like Ceph RGW.",source:"@site/docs/CephBox/CephBox - DIY setup/Setup Ente Photos app.md",sourceDirName:"CephBox/CephBox - DIY setup",slug:"/CephBox/CephBox - DIY setup/Setup Ente Photos app",permalink:"/docs/CephBox/CephBox - DIY setup/Setup Ente Photos app",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/CephBox/CephBox - DIY setup/Setup Ente Photos app.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Installing Ceph Cluster",permalink:"/docs/CephBox/CephBox - DIY setup/Installing Ceph Cluster"},next:{title:"Troubleshooting Doc",permalink:"/docs/CephBox/CephBox - DIY setup/Troubleshooting Doc"}},c={},d=({children:e,color:n})=>(0,s.jsx)("span",{style:{backgroundColor:n,borderRadius:"2px",color:"#fff",padding:"0.2rem"},children:e}),a=[{value:"Ente desktop app and mobile app",id:"ente-desktop-app-and-mobile-app",level:2},{value:"Deploying Ente Musuem server with Postgress",id:"deploying-ente-musuem-server-with-postgress",level:3}];function p(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://github.com/ente-io/ente",children:"Ente Photos"}),"  app is a fully open source, end-to-end encrypted platform  to store your photos(an open source alternative to Apple and Google Photos).Ente photos can be also used to ",(0,s.jsx)(n.a,{href:"https://help.ente.io/self-hosting/",children:"Self-host"})," and integrate with any S3 compatible storage platform like Ceph RGW."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Huge shout-out to the Ente team for their awesomeness!"})}),"\n",(0,s.jsx)(n.p,{children:"We are using Ente Photos app to store our photos integrating with the Ceph Cluster that we have built."}),"\n",(0,s.jsx)(n.p,{children:"Okay, now here are some bare minimum basics of Ente architecture to get started."}),"\n",(0,s.jsx)(n.p,{children:"There are three major Components in Ente platform:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Ente desktop and mobile app"})," --\x3e This is the user interface"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Ente Musuem server with Postgress"})," --\x3e Stateless API server which manages the access of data"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Ceph RGW external"})," --\x3e This is where the actual data is stored in S3 buckets"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"For the uploads to work, all three of them need to be able to reach each other. This is because the client uploads directly to the object storage. The interaction goes something like this:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Client wants to upload, it asks museum where it should upload to."}),"\n",(0,s.jsx)(n.li,{children:"Museum creates pre-signed URLs for the S3 bucket that was configured."}),"\n",(0,s.jsx)(n.li,{children:"Client directly uploads to the S3 buckets using these URLs."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Read more about Museum and Ente architecture ",(0,s.jsx)(n.a,{href:"https://help.ente.io/self-hosting/guides/configuring-s3",children:"here"})]}),"\n",(0,s.jsx)(n.h2,{id:"ente-desktop-app-and-mobile-app",children:"Ente desktop app and mobile app"}),"\n",(0,s.jsxs)(n.p,{children:["You can download and install the desktop app from their official ",(0,s.jsx)(n.a,{href:"https://ente.photos/",children:"website"}),".\nTo use it in your mobile phone, you can install the android app from ",(0,s.jsx)(n.a,{href:"https://play.google.com/store/apps/details?id=io.ente.photos&hl=en_IN",children:"playstore"})]}),"\n",(0,s.jsx)(n.p,{children:"By default if you login, the app will connect to Ente's production server endpoint which is not what we want.\nFor self-hosting, we need to provide our local endpoint."}),"\n",(0,s.jsxs)(n.p,{children:["Now here is the trick;\n",(0,s.jsxs)(d,{color:"#106b51",children:[(0,s.jsx)(n.strong,{children:"tap 7 times on the onboarding screen"})," "]})," and  to bring up developer settings page where you can configure the endpoint the app should be connecting to."]}),"\n",(0,s.jsx)("img",{src:"/img/ente_developer_page.png",alt:"Sample Image",width:"500",height:"300"}),"\n",(0,s.jsx)(n.h3,{id:"deploying-ente-musuem-server-with-postgress",children:"Deploying Ente Musuem server with Postgress"}),"\n",(0,s.jsx)(n.p,{children:"Steps:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"In one of the Raspberry Pi machine create a directory where you'll run Ente"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"# mkdir ente && cd ente\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Copy the starter ",(0,s.jsx)(n.em,{children:"compose.yaml"})," and  its support files from the repository onto your directory. You can do it by hand, or use (e.g.) curl"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"> compose.yaml\n# curl -LO https://raw.githubusercontent.com/karunjosy/ente-with-ceph/refs/heads/main/compose.yaml\n\n# mkdir -p scripts/compose\n# cd scripts/compose\n\n> scripts/compose/credentials.yaml\n# curl -LO https://raw.githubusercontent.com/karunjosy/ente-with-ceph/refs/heads/main/credentials.yaml\n\n# cd ../..\n"})}),"\n",(0,s.jsx)(n.admonition,{title:"Note",type:"tip",children:(0,s.jsxs)(n.p,{children:["The above files are customized to get Musuem server running with Ceph as backend.\nRead more about these services ",(0,s.jsx)(n.a,{href:"https://github.com/ente-io/ente/blob/main/server/docs/docker.md",children:"here"})]})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"compose.yaml starts museum and postgress containers by pulling container images. Here is a sample"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'services:\n  museum:\n    image: ghcr.io/ente-io/server\n    ports:\n      - 8080:8080 # API\n      - 2112:2112 # Prometheus metrics\n    depends_on:\n      postgres:\n        condition: service_healthy\n    environment:\n      # Pass-in the config to connect to the DB and MinIO\n      ENTE_CREDENTIALS_FILE: /credentials.yaml\n    volumes:\n      - custom-logs:/var/logs\n      - ./museum.yaml:/museum.yaml:ro\n      - ./scripts/compose/credentials.yaml:/credentials.yaml:ro\n      - ./data:/data:ro\n    networks:\n      - internal\n\n  postgres:\n    image: postgres:15\n    ports:\n      - 5432:5432\n    environment:\n      POSTGRES_USER: pguser\n      POSTGRES_PASSWORD: pgpass\n      POSTGRES_DB: ente_db\n    # Wait for postgres to be accept connections before starting museum.\n    healthcheck:\n      test:\n        [\n          "CMD",\n          "pg_isready",\n          "-q",\n          "-d",\n          "ente_db",\n          "-U",\n          "pguser"\n        ]\n      start_period: 40s\n      start_interval: 1s\n    volumes:\n      - postgres-data:/var/lib/postgresql/data\n    networks:\n      - internal\nvolumes:\n  custom-logs:\n  postgres-data:\n  \n\n\nnetworks:\n  internal:\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"scripts/compose/credentials.yaml should contain the ceph RGW endpoint and bucket details.\nFor example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"db:\n    host: postgres\n    port: 5432\n    name: ente_db\n    user: pguser\n    password: pgpass\n\ns3:\n    are_local_buckets: true\n    b2-eu-cen:\n        key: <access_key>\n        secret: <secret_key>\n        endpoint: 10.x.x.x:80 \n        region: eu-central-2\n            bucket: test\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Install docker and docker-compose if not present"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"docker-compose :"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'# apt install docker.io -y\n\n# curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose\n\n#  chmod +x /usr/local/bin/docker-compose\n#  docker-compose --version\nDocker Compose version v2.29.7\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"docker engine install"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'# apt install ca-certificates curl gnupg\n#  install -m 0755 -d /etc/apt/keyrings\n# curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\n# sudo chmod a+r /etc/apt/keyrings/docker.gpg\n# echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\n# apt update\n# apt install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n# docker version\n Version:           27.3.1\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Set CORS for the bucket"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Create cors.xml file"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"<CORSConfiguration>\n    <CORSRule>\n        <AllowedOrigin>*</AllowedOrigin>\n        <AllowedMethod>GET</AllowedMethod>\n        <AllowedMethod>HEAD</AllowedMethod>\n        <AllowedMethod>POST</AllowedMethod>\n        <AllowedMethod>PUT</AllowedMethod>\n        <AllowedMethod>DELETE</AllowedMethod>\n        <AllowedHeader>*</AllowedHeader>\n        <ExposeHeader>Etag</ExposeHeader>\n        <MaxAgeSeconds>3000</MaxAgeSeconds>\n    </CORSRule>\n</CORSConfiguration>\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"apply it to the bucket using s3cmd"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"s3cmd setcors cors.xml s3://test\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Note : To install s3cmd client refer here"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["From the ",(0,s.jsx)(n.em,{children:"ente"})," directory run"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"docker-compose up\n"})}),"\n",(0,s.jsx)(n.p,{children:"or if you want to run the process in background"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"nohup docker-compose up &\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Open the mobile or desktop app and tap 7 times and enter the endpoint"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"https://<IP>:8080\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Create an account and upload your first photo!"}),"\n",(0,s.jsx)(n.admonition,{title:"Note",type:"tip",children:(0,s.jsx)(n.p,{children:"To create and manage new accounts, refer here"})}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>l});var s=t(6540);const o={},r=s.createContext(o);function i(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);